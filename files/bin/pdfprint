#!/bin/bash

### BEGIN INIT INFO
# Provides:          pdfprint
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start pdfprint at boot time
# Description:       Print-to-PDF voodoo to present a consistent virtual printer front-end for a physical printer back-end.
### END INIT INFO


PIDFILE=/run/pdfprintd.pid


function status {
  pid="$(get_pid)"
  if check_pid "${pid}" > /dev/null; then
    echo "PID ${pid} is running."
    return 0
  else
    if test "" == "${pid}"; then
      echo "pdfprintd is not running."
      return 3
    else
      echo "PID ${pid} is recorded, but not running."
      return 1
    fi
  fi
}


function stop {
  pid="$(get_pid | head -n 1)"
  if test '' = "${pid}"; then
    echo "No PID recorded."
    return 0
  fi
  echo "Killing PID ${pid}."
  kill "${pid}"
  for i in {0..9}; do
    if ! check_pid "${pid}" > /dev/null; then
      echo "PID ${pid} is dead."
      break
    fi
    case i in
      0)
        echo -en "Waiting for PID ${pid} to die..."
        ;;
      9)
        echo "still running!"
        exit 1
        ;;
      *)
        echo -en "."
        ;;
    esac
  done

  if check_pid "${pid}" > /dev/null; then
    echo "PID ${pid} is not stopped."
  else
    echo "PID ${pid} is stopped."
  fi

  echo "Killing processes named:  pdfprintd"
  pkill pdfprintd
  for i in {0..9}; do
    if ! pgrep -x pdfprintd > /dev/null; then
      echo "pdfprintd is dead."
      clear_pid
      break
    fi
    case i in
      0)
        echo -en "Waiting..."
        ;;
      9)
        echo "pdfprintd is still running!"
        exit 1
        ;;
      *)
        echo -en "."
        ;;
    esac
  done
}


function start {
  pid="$(get_pid)"
  if ! test '' = "${pid}" && check_pid "${pid}" > /dev/null; then
    echo "PID ${pid} is already running."
  else
    if 
      sudo -u pdfprintd nohup /usr/local/bin/pdfprintd >/dev/null 2>&1 &
    then
      pid="${!}"
      set_pid "${pid}"
      echo "PID ${pid} is started."
    else
      echo "pdfprintd was not started."
    fi
  fi
}


function set_pid {
  echo $1 > $PIDFILE
}


function get_pid {
  if test -e $PIDFILE; then
    grep -E '^[0-9]+$' $PIDFILE | head -n 1
  else
    return 1
  fi
}


function clear_pid {
  rm $PIDFILE
}


function check_pid {
  pid="${1}"
  ps -p "${pid}" >/dev/null 2>&1
}


case "${1}" in
  'status')
    status
    ;;
  'stop')
    stop
    ;;
  'start') 
    start
    ;;
  'restart')
    stop && start
    ;;
  '*')
    echo "Valid sub-commands are:  status stop start restart"
    exit 1
    ;;
esac

